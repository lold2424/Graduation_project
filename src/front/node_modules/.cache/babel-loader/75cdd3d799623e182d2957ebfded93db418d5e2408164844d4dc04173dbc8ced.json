{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lold2\\\\demo\\\\src\\\\front\\\\src\\\\page\\\\MainPage.tsx\",\n  _s = $RefreshSig$();\n// src/MainPage.tsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\n// Styled Components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n`;\n_c = Container;\nconst SongList = styled.div`\n  width: 100%;\n  max-width: 800px;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n`;\n_c2 = SongList;\nconst SongCard = styled.div`\n  background-color: #f8f8f8;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  padding: 15px;\n  text-align: center;\n`;\n_c3 = SongCard;\nconst SongTitle = styled.h2`\n  font-size: 18px;\n  color: #333;\n  margin-bottom: 10px;\n`;\n_c4 = SongTitle;\nconst SongDescription = styled.p`\n  font-size: 14px;\n  color: #666;\n`;\n_c5 = SongDescription;\nconst MainPage = () => {\n  _s();\n  const [data, setData] = useState(null); // Replace 'any' with your actual data type\n\n  useEffect(() => {\n    // 백엔드의 /main 엔드포인트에서 데이터 가져오기\n    axios.get('/main').then(response => {\n      setData(response.data); // 데이터 설정\n    }).catch(error => {\n      console.error('Error fetching data from backend:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Vtuber Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), data ? /*#__PURE__*/_jsxDEV(SongList, {\n      children: data.randomSongs.map(song => /*#__PURE__*/_jsxDEV(SongCard, {\n        children: [/*#__PURE__*/_jsxDEV(SongTitle, {\n          children: song.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(SongDescription, {\n          children: song.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c6 = MainPage;\nexport default MainPage;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"SongList\");\n$RefreshReg$(_c3, \"SongCard\");\n$RefreshReg$(_c4, \"SongTitle\");\n$RefreshReg$(_c5, \"SongDescription\");\n$RefreshReg$(_c6, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","styled","jsxDEV","_jsxDEV","Container","div","_c","SongList","_c2","SongCard","_c3","SongTitle","h2","_c4","SongDescription","p","_c5","MainPage","_s","data","setData","get","then","response","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","randomSongs","map","song","title","description","id","_c6","$RefreshReg$"],"sources":["C:/Users/lold2/demo/src/front/src/page/MainPage.tsx"],"sourcesContent":["// src/MainPage.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\n// Styled Components\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n`;\r\n\r\nconst SongList = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin-top: 20px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n`;\r\n\r\nconst SongCard = styled.div`\r\n  background-color: #f8f8f8;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  text-align: center;\r\n`;\r\n\r\nconst SongTitle = styled.h2`\r\n  font-size: 18px;\r\n  color: #333;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst SongDescription = styled.p`\r\n  font-size: 14px;\r\n  color: #666;\r\n`;\r\n\r\nconst MainPage: React.FC = () => {\r\n    const [data, setData] = useState<any>(null); // Replace 'any' with your actual data type\r\n\r\n    useEffect(() => {\r\n        // 백엔드의 /main 엔드포인트에서 데이터 가져오기\r\n        axios.get('/main')\r\n            .then((response) => {\r\n                setData(response.data); // 데이터 설정\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data from backend:', error);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Vtuber Songs</h1>\r\n            {data ? (\r\n                <SongList>\r\n                    {data.randomSongs.map((song: any) => (\r\n                        <SongCard key={song.id}>\r\n                            <SongTitle>{song.title}</SongTitle>\r\n                            <SongDescription>{song.description}</SongDescription>\r\n                            {/* 노래 데이터에 대한 추가 정보를 표시 */}\r\n                        </SongCard>\r\n                    ))}\r\n                </SongList>\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}