{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lold2\\\\demo\\\\src\\\\front\\\\src\\\\page\\\\MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [data, setData] = useState(null); // Replace 'any' with your actual data type\n\n  useEffect(() => {\n    // 백엔드의 /main 엔드포인트에서 데이터 가져오기\n    axios.get('/main').then(response => {\n      console.log(response.data); // Fetch된 데이터를 콘솔에 출력하여 확인\n      setData(response.data); // 데이터 설정\n    }).catch(error => {\n      console.error('Error fetching data from backend:', error);\n    });\n  }, []);\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this); // 데이터를 가져오는 중일 때 로딩 표시\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Vtuber Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Random Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), data.randomSongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: song.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Published At: \", new Date(song.publishedAt).toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)]\n    }, song.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top 10 Weekly Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), data.top10WeeklySongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: song.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Views Increase (Week): \", song.viewsIncreaseWeek]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, song.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top 10 Daily Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), data.top10DailySongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: song.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Views Increase (Day): \", song.viewsIncreaseDay]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, song.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top 10 Recent Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), data.top10RecentSongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: song.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Published At: \", new Date(song.publishedAt).toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, song.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","MainPage","_s","data","setData","get","then","response","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","randomSongs","map","song","title","description","Date","publishedAt","toLocaleDateString","id","top10WeeklySongs","viewsIncreaseWeek","top10DailySongs","viewsIncreaseDay","top10RecentSongs","_c","$RefreshReg$"],"sources":["C:/Users/lold2/demo/src/front/src/page/MainPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst MainPage: React.FC = () => {\r\n    const [data, setData] = useState<any>(null); // Replace 'any' with your actual data type\r\n\r\n    useEffect(() => {\r\n        // 백엔드의 /main 엔드포인트에서 데이터 가져오기\r\n        axios.get('/main')\r\n            .then((response) => {\r\n                console.log(response.data); // Fetch된 데이터를 콘솔에 출력하여 확인\r\n                setData(response.data); // 데이터 설정\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data from backend:', error);\r\n            });\r\n    }, []);\r\n\r\n    if (!data) {\r\n        return <p>Loading...</p>; // 데이터를 가져오는 중일 때 로딩 표시\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Vtuber Songs</h1>\r\n\r\n            {/* Random Songs Section */}\r\n            <h2>Random Songs</h2>\r\n            {data.randomSongs.map((song: any) => (\r\n                <div key={song.id}>\r\n                    <h3>{song.title}</h3>\r\n                    <p>{song.description}</p>\r\n                    <p>Published At: {new Date(song.publishedAt).toLocaleDateString()}</p>\r\n                </div>\r\n            ))}\r\n\r\n            {/* Top 10 Weekly Songs Section */}\r\n            <h2>Top 10 Weekly Songs</h2>\r\n            {data.top10WeeklySongs.map((song: any) => (\r\n                <div key={song.id}>\r\n                    <h3>{song.title}</h3>\r\n                    <p>{song.description}</p>\r\n                    <p>Views Increase (Week): {song.viewsIncreaseWeek}</p>\r\n                </div>\r\n            ))}\r\n\r\n            {/* Top 10 Daily Songs Section */}\r\n            <h2>Top 10 Daily Songs</h2>\r\n            {data.top10DailySongs.map((song: any) => (\r\n                <div key={song.id}>\r\n                    <h3>{song.title}</h3>\r\n                    <p>{song.description}</p>\r\n                    <p>Views Increase (Day): {song.viewsIncreaseDay}</p>\r\n                </div>\r\n            ))}\r\n\r\n            {/* Top 10 Recent Songs Section */}\r\n            <h2>Top 10 Recent Songs</h2>\r\n            {data.top10RecentSongs.map((song: any) => (\r\n                <div key={song.id}>\r\n                    <h3>{song.title}</h3>\r\n                    <p>{song.description}</p>\r\n                    <p>Published At: {new Date(song.publishedAt).toLocaleDateString()}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}